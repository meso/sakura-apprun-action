# ビルドステージ
FROM node:22-alpine AS builder

WORKDIR /app

# package*.jsonをコピー（package-lock.jsonも含む）
COPY package*.json ./

# 全ての依存関係をインストール（devDependenciesを含む）
RUN npm ci || npm install

# アプリケーションのソースをコピー
COPY . .

# ビルドを実行
RUN npm run build

# 実行ステージ
FROM node:22-alpine

# Install supervisor and litestream
RUN apk add --no-cache supervisor curl bash && \
    curl -L https://github.com/benbjohnson/litestream/releases/download/v0.3.13/litestream-v0.3.13-linux-amd64.tar.gz | tar -C /usr/local/bin -xzf -

WORKDIR /app

# package*.jsonをコピー
COPY package*.json ./

# 本番用の依存関係のみインストール
RUN npm ci --only=production || npm install --production

# ビルドステージから成果物をコピー
COPY --from=builder /app/dist ./dist

# 必要に応じて他のファイルもコピー（例：public, views等）
# COPY --from=builder /app/public ./public

# Litestream設定ファイルとSupervisord設定を生成するスクリプト
COPY <<'EOF' /app/setup-litestream.sh
#!/bin/bash
set -e

# Check if all required environment variables are set
if [ -n "$SAKURA_OBJECT_STORAGE_BUCKET" ] && \
   [ -n "$SAKURA_OBJECT_STORAGE_ACCESS_KEY" ] && \
   [ -n "$SAKURA_OBJECT_STORAGE_SECRET_KEY" ] && \
   [ -n "$SQLITE_DB_PATH" ]; then
  
  echo "Configuring Litestream backup..."
  echo "Bucket: $SAKURA_OBJECT_STORAGE_BUCKET"
  echo "DB Path: $SQLITE_DB_PATH"
  echo "Sync Interval: ${LITESTREAM_REPLICATE_INTERVAL:-10s}"
  
  # Create directory for SQLite database if it doesn't exist
  mkdir -p "$(dirname "$SQLITE_DB_PATH")"
  
  # Check if SQLite database file exists (it may not exist on first run)
  if [ -f "$SQLITE_DB_PATH" ]; then
    echo "SQLite database file found at $SQLITE_DB_PATH"
  else
    echo "SQLite database file will be created at $SQLITE_DB_PATH when app starts"
  fi
  
  # Create Litestream config
  cat > /etc/litestream.yml <<LITESTREAM_EOF
dbs:
  - path: $SQLITE_DB_PATH
    replicas:
      - type: s3
        endpoint: https://s3.isk01.sakurastorage.jp
        bucket: $SAKURA_OBJECT_STORAGE_BUCKET
        path: ${SQLITE_DB_PATH##*/}
        access-key-id: $SAKURA_OBJECT_STORAGE_ACCESS_KEY
        secret-access-key: $SAKURA_OBJECT_STORAGE_SECRET_KEY
        sync-interval: ${LITESTREAM_REPLICATE_INTERVAL:-10s}
LITESTREAM_EOF

  # Create supervisord config with Litestream
  cat > /etc/supervisord.conf <<SUPERVISOR_EOF
[supervisord]
nodaemon=true
logfile=/dev/stdout
logfile_maxbytes=0
loglevel=info

[program:litestream]
command=/usr/local/bin/litestream replicate -v
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
autorestart=true
priority=1

[program:app]
command=npm start
directory=/app
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
autorestart=true
priority=10
environment=NODE_ENV="production",HOST="0.0.0.0",PORT="3000"
SUPERVISOR_EOF

  echo "Starting supervisord with Litestream and app..."
  echo "Litestream config:"
  cat /etc/litestream.yml
  echo "---"
  echo "Litestream will monitor $SQLITE_DB_PATH for changes and backup to s3://$SAKURA_OBJECT_STORAGE_BUCKET"
  
  # Start with supervisord
  exec /usr/bin/supervisord -c /etc/supervisord.conf
else
  echo "Litestream backup not configured, starting app directly..."
  # Start app directly without supervisord
  exec npm start
fi
EOF

RUN chmod +x /app/setup-litestream.sh

# 環境変数
ENV NODE_ENV=production
ENV HOST=0.0.0.0
ENV PORT=3000

# ポート3000を公開
EXPOSE 3000

# エントリーポイントとして設定スクリプトを使用
ENTRYPOINT ["/app/setup-litestream.sh"]